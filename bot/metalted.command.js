import * as builder from './metalted.builder.js';
import { Application } from './metalted.application.js';

export const commands = {
    'error' : {
        command: () =>
        {
            const cmd = builder.CommandBuilder();
            cmd.CreateChatInputCommand('error', 'This command will produce an error message.');
            return cmd.command;
        }
    },
    'mo' : {
        command: () =>
        {
            const cmd = builder.CommandBuilder();
            cmd.CreateChatInputCommand('mo', 'A simple mo command with options');
            return cmd.command;
        },
        app : (request, userInteractionSystem) =>
        {
            const application = Application(request, userInteractionSystem);
            application.parse = function(request, isComponent)
            {
                if(!isComponent)
                {
                    const msg = builder.MessageBuilder(request, application.applicationId);
                    msg.AddPrimaryButton(0, "Go Mo!");
                    msg.AddSecondaryButton(0, "Cancel");
                    return msg.message;
                }
                else
                {
                    const customIdData = request.body.data.custom_id.split('|');
                    const applicationId = customIdData[0];
                    const component = customIdData[1];
                  
                    switch(component){
                      case "go mo!":                        
                        this.exit();
                        return builder.ChatMessage(`Thank you for flying with Mo airlines!`);
                        break;
                      case "cancel":
                        return builder.ChatMessage(`Mo is confused... Ok bye!`);
                        this.exit();
                        break;
                    }
                }                
            }
            return application;
        }
    },
    'User Command' : {
        command: () =>
        {
            const cmd = builder.CommandBuilder();
            cmd.CreateUserCommand('User Command');
            return cmd.command;            
        },
        response: (request) => 
        { 
            return builder.ChatMessage('A response generated by a user command.'); 
        }
    },
    'Message Command' : {
        command: () =>
        {
            const cmd = builder.CommandBuilder();
            cmd.CreateMessageCommand('Message Command');
            return cmd.command;            
        },
        response: (request) => 
        { 
            return builder.ChatMessage('A response generated by a message command.'); 
        }
    }
};